# -*- coding: utf-8 -*-
"""API_SPOTIFY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNcZFoLXd7nAMAoEjvAeRs29nuTTod6i
"""

import requests
import pandas as pd
import base64

# Creamos la url para hacer la peticion
url_base = "https://api.spotify.com/v1"
ep_artist = "/artists/{artist_id}"
id_aironmainden = "6mdiAmATAx73kdxrNrnlao"
url_base+ep_artist.format(artist_id=id_aironmainden)

# Spotify pide obtener un access token 
token_url = 'https://accounts.spotify.com/api/token'
params = {'grant_type': 'client_credentials'}
# Para obtener el parametro de basic se tiene que encode64 el cliendID:SecretID
headers = {'Authorization': 'Basic MGZlOTliNTNhOTlmNDEyODliMTc5MzRkZTMzNjQxMGM6NDA4ZmY5NTVkMDAxNGFmYzgxZTEwMGY1NTI5YWFhYWI='}

# Obtenemos access token
r = requests.post(token_url, data=params, headers=headers)
r.json()

token = r.json()['access_token']

# Hacemos peticion con el access token
headers = {'Authorization': 'Bearer {}'.format(token)}
r = requests.get(url_base+ep_artist.format(artist_id=id_aironmainden), headers=headers)

r.json()

url_busqueda= "https://api.spotify.com/v1/search"
search_params = {'q': "Iron+Maiden", 'type':'artist', 'market': 'MX'}

busqueda = requests.get(url_busqueda, headers=headers, params=search_params)
busqueda.json()

df = pd.DataFrame(busqueda.json()['artists']['items'])
df.head()

df.sort_values(by="popularity", ascending=False).iloc[0]['id']

# base64 nos permite codificar el ClientID y el ClientSecret
def get_token(client_id, client_secret):
  encoded = base64.b64encode(bytes(client_id+':'+client_secret, 'utf-8'))
  params = {'grant_type': 'client_credentials'}
  headers= {'Authorization': 'Basic ' + str(encoded, 'utf-8')}
  r = requests.post('https://accounts.spotify.com/api/token', data=params, headers=headers)
  if r.status_code != 200:
    print('Error en el request', r.json())
    return None
  print("Token valido por {} segundos".format(r.json()['expires_in']))
  return r.json()['access_token']

client_id = "YOUR_CLIENT_ID"
client_secret = "YOUR_SECRET_ID"
token = get_token(client_id, client_secret)

headers = {'Authorization': 'Bearer {}'.format(token)}

endpoint_albums = "/artists/{artist_id}/albums"

url_base+endpoint_albums

# Obtenemos los albums de el artista

params = {'country': 'MX'}
albums_ironmaiden = requests.get(url_base+endpoint_albums.format(artist_id=id_aironmainden), headers= headers, params=params)
albums_ironmaiden.json()

# Nos quedamos con los items del json
albums = albums_ironmaiden.json()['items']
endpoint_album = '/albums/{album_id}'
url_base+endpoint_album

def get_album_info(album_id):
  endpoint_album = '/albums/{album_id}'
  headers = {'Authorization': 'Bearer {}'.format(token)}
  params = {'country': 'MX'}
  album = requests.get(url_base+endpoint_album.format(album_id=album_id), headers= headers, params=params).json()
  
  return {album['id'] : album['name'] }

album_data = []
for album in albums:
  album_data.append(get_album_info(album['id']))
  print(album['id'])

def obtener_discografia(artist_id, token, return_name = False, page_limit = 50, country = None):
  url = f'https://api.spotify.com/v1/artists/{artist_id}/albums'
  headers = {'Authorization': f'Bearer {token}'}
  params = {'limit': page_limit, 'offset': 0, 'country': country }

  lista = []

  r = requests.get(url, params=params, headers=headers)

  if r.status_code != 200:
    print('Error en reques', r.json())
    return None
  
  if return_name:
    lista += [(item['id'], item['name']) for item in r.json()['items']]
  else:
    lista += [(item['id']) for item in r.json()['items']]

  while r.json()['next']:
    r = requests.get(r.json()['next'], headers=headers)
    if return_name:
      lista += [(item['id'], item['name']) for item in r.json()['items']]
    else:
      lista += [(item['id']) for item in r.json()['items']]
      
  return lista

def obtener_tracks(album_id, token, return_name=False, page_limit=50, market=None):
  url = f'https://api.spotify.com/v1/albums/{album_id}/tracks'
  headers = {'Authorization': f'Bearer {token}'}
  params = {'limit': page_limit, 'offset': 0, 'market': market }
  
  lista = []
  r = requests.get(url, params=params, headers=headers)

  if r.status_code != 200:
    print('Error en reques', r.json())
    return None
  
  if return_name:
    lista += [(item['id'], item['name']) for item in r.json()['items']]
  else:
    lista += [(item['id']) for item in r.json()['items']]

  while r.json()['next']:
    r = requests.get(r.json()['next'], headers=headers)
    if return_name:
      lista += [(item['id'], item['name']) for item in r.json()['items']]
    else:
      lista += [(item['id']) for item in r.json()['items']]
      
  return lista

for album in obtener_discografia(id_aironmainden, token, return_name=True, country='MX'):
  print(album[1])
  for track in obtener_tracks(album[0], token, return_name=True, market='MX'):
    print('\t', track[1])