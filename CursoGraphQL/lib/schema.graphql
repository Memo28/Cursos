"Valida los tipos de nivel"
enum Level{
    PRINCIPANTE
    INTERMEDIO
    AVANZADO
}

"""
    Unions permiten agrupar colecciones de datos que no tengan fields en comun, para su implementacion se tiene
    que crear un type, generacion del query
    searchItems(keyword: "@gmail"){
        __typename
        ... on Course{
            title
            description
        }
        ... on Monitor{
            name
            phone
        }
        ... on Student{
            name
            email
        }
    }
"""

union GlobalSearch = Course | Student | Monitor

"Esquemas de cursos"
type Course {
    _id : ID!
    title: String!
    teacher: String
    description: String!
    topic: String @deprecated
    people: [Student]
    level: Level
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

"""
    Las interfaces nos permiten agrupar tipos, para hacer consultas ocupamos
    getPeople{
        _id
        name
        email
        ... on Student{
            avatar
        }
        ... on Monitor{
            phone
        }
  }
"""
interface Person{
    _id: ID
    name: String!
    email: String!
}

"Esquemas de estudiantes"
type Student implements Person {
    _id: ID
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID
    name: String!
    email: String!
    phone: String
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String

}

type Query {
    "Devuelve todos los cursos"
    getCourses: [Course]
    "Devuelve un curso"
    getCourse(_id: ID!): Course
    "Devuelve todos los estudiantes"
    getPeople: [Person]
    "Devuelve un estudiante"
    getPerson(_id: ID!): Person
    "Ejecuta una busqueda global"
    searchItems(keyword: String!): [GlobalSearch]
}

type Mutation {
    "Crear curso"
    createCourse(input: CourseInput! ): Course
    "Edita un curso"
    editCourse(_id: ID!, input: CourseEditInput ): Course
    "Eliminat curso"
    deleteCourse(_id: ID!): String
    "Crear persona"
    createPerson(input: PersonInput! ): Person
    "Editar persona"
    editPerson(_id: ID!, input: PersonEditInput ): Person
    "Eliminar persona"
    deletePerson(_id: ID!): String
    "Agrega persona a un curso"
    addPeople(courseID: ID!, personID: ID!): Course
}